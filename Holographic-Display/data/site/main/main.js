/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/gifuct-js/lib/deinterlace.js":
/*!***************************************************!*\
  !*** ./node_modules/gifuct-js/lib/deinterlace.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deinterlace = void 0;\n\n/**\r\n * Deinterlace function from https://github.com/shachaf/jsgif\r\n */\nvar deinterlace = function deinterlace(pixels, width) {\n  var newPixels = new Array(pixels.length);\n  var rows = pixels.length / width;\n\n  var cpRow = function cpRow(toRow, fromRow) {\n    var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n    newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n  }; // See appendix E.\n\n\n  var offsets = [0, 4, 2, 1];\n  var steps = [8, 8, 4, 2];\n  var fromRow = 0;\n\n  for (var pass = 0; pass < 4; pass++) {\n    for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n      cpRow(toRow, fromRow);\n      fromRow++;\n    }\n  }\n\n  return newPixels;\n};\n\nexports.deinterlace = deinterlace;\n\n//# sourceURL=webpack:///./node_modules/gifuct-js/lib/deinterlace.js?");

/***/ }),

/***/ "./node_modules/gifuct-js/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/gifuct-js/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decompressFrames = exports.decompressFrame = exports.parseGIF = void 0;\n\nvar _gif = _interopRequireDefault(__webpack_require__(/*! js-binary-schema-parser/lib/schemas/gif */ \"./node_modules/js-binary-schema-parser/lib/schemas/gif.js\"));\n\nvar _jsBinarySchemaParser = __webpack_require__(/*! js-binary-schema-parser */ \"./node_modules/js-binary-schema-parser/lib/index.js\");\n\nvar _uint = __webpack_require__(/*! js-binary-schema-parser/lib/parsers/uint8 */ \"./node_modules/js-binary-schema-parser/lib/parsers/uint8.js\");\n\nvar _deinterlace = __webpack_require__(/*! ./deinterlace */ \"./node_modules/gifuct-js/lib/deinterlace.js\");\n\nvar _lzw = __webpack_require__(/*! ./lzw */ \"./node_modules/gifuct-js/lib/lzw.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parseGIF = function parseGIF(arrayBuffer) {\n  var byteData = new Uint8Array(arrayBuffer);\n  return (0, _jsBinarySchemaParser.parse)((0, _uint.buildStream)(byteData), _gif[\"default\"]);\n};\n\nexports.parseGIF = parseGIF;\n\nvar generatePatch = function generatePatch(image) {\n  var totalPixels = image.pixels.length;\n  var patchData = new Uint8ClampedArray(totalPixels * 4);\n\n  for (var i = 0; i < totalPixels; i++) {\n    var pos = i * 4;\n    var colorIndex = image.pixels[i];\n    var color = image.colorTable[colorIndex] || [0, 0, 0];\n    patchData[pos] = color[0];\n    patchData[pos + 1] = color[1];\n    patchData[pos + 2] = color[2];\n    patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\n  }\n\n  return patchData;\n};\n\nvar decompressFrame = function decompressFrame(frame, gct, buildImagePatch) {\n  if (!frame.image) {\n    console.warn('gif frame does not have associated image.');\n    return;\n  }\n\n  var image = frame.image; // get the number of pixels\n\n  var totalPixels = image.descriptor.width * image.descriptor.height; // do lzw decompression\n\n  var pixels = (0, _lzw.lzw)(image.data.minCodeSize, image.data.blocks, totalPixels); // deal with interlacing if necessary\n\n  if (image.descriptor.lct.interlaced) {\n    pixels = (0, _deinterlace.deinterlace)(pixels, image.descriptor.width);\n  }\n\n  var resultImage = {\n    pixels: pixels,\n    dims: {\n      top: frame.image.descriptor.top,\n      left: frame.image.descriptor.left,\n      width: frame.image.descriptor.width,\n      height: frame.image.descriptor.height\n    }\n  }; // color table\n\n  if (image.descriptor.lct && image.descriptor.lct.exists) {\n    resultImage.colorTable = image.lct;\n  } else {\n    resultImage.colorTable = gct;\n  } // add per frame relevant gce information\n\n\n  if (frame.gce) {\n    resultImage.delay = (frame.gce.delay || 10) * 10; // convert to ms\n\n    resultImage.disposalType = frame.gce.extras.disposal; // transparency\n\n    if (frame.gce.extras.transparentColorGiven) {\n      resultImage.transparentIndex = frame.gce.transparentColorIndex;\n    }\n  } // create canvas usable imagedata if desired\n\n\n  if (buildImagePatch) {\n    resultImage.patch = generatePatch(resultImage);\n  }\n\n  return resultImage;\n};\n\nexports.decompressFrame = decompressFrame;\n\nvar decompressFrames = function decompressFrames(parsedGif, buildImagePatches) {\n  return parsedGif.frames.filter(function (f) {\n    return f.image;\n  }).map(function (f) {\n    return decompressFrame(f, parsedGif.gct, buildImagePatches);\n  });\n};\n\nexports.decompressFrames = decompressFrames;\n\n//# sourceURL=webpack:///./node_modules/gifuct-js/lib/index.js?");

/***/ }),

/***/ "./node_modules/gifuct-js/lib/lzw.js":
/*!*******************************************!*\
  !*** ./node_modules/gifuct-js/lib/lzw.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.lzw = void 0;\n\n/**\r\n * javascript port of java LZW decompression\r\n * Original java author url: https://gist.github.com/devunwired/4479231\r\n */\nvar lzw = function lzw(minCodeSize, data, pixelCount) {\n  var MAX_STACK_SIZE = 4096;\n  var nullCode = -1;\n  var npix = pixelCount;\n  var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\n  var dstPixels = new Array(pixelCount);\n  var prefix = new Array(MAX_STACK_SIZE);\n  var suffix = new Array(MAX_STACK_SIZE);\n  var pixelStack = new Array(MAX_STACK_SIZE + 1); // Initialize GIF data stream decoder.\n\n  data_size = minCodeSize;\n  clear = 1 << data_size;\n  end_of_information = clear + 1;\n  available = clear + 2;\n  old_code = nullCode;\n  code_size = data_size + 1;\n  code_mask = (1 << code_size) - 1;\n\n  for (code = 0; code < clear; code++) {\n    prefix[code] = 0;\n    suffix[code] = code;\n  } // Decode GIF pixel stream.\n\n\n  var datum, bits, count, first, top, pi, bi;\n  datum = bits = count = first = top = pi = bi = 0;\n\n  for (i = 0; i < npix;) {\n    if (top === 0) {\n      if (bits < code_size) {\n        // get the next byte\n        datum += data[bi] << bits;\n        bits += 8;\n        bi++;\n        continue;\n      } // Get the next code.\n\n\n      code = datum & code_mask;\n      datum >>= code_size;\n      bits -= code_size; // Interpret the code\n\n      if (code > available || code == end_of_information) {\n        break;\n      }\n\n      if (code == clear) {\n        // Reset decoder.\n        code_size = data_size + 1;\n        code_mask = (1 << code_size) - 1;\n        available = clear + 2;\n        old_code = nullCode;\n        continue;\n      }\n\n      if (old_code == nullCode) {\n        pixelStack[top++] = suffix[code];\n        old_code = code;\n        first = code;\n        continue;\n      }\n\n      in_code = code;\n\n      if (code == available) {\n        pixelStack[top++] = first;\n        code = old_code;\n      }\n\n      while (code > clear) {\n        pixelStack[top++] = suffix[code];\n        code = prefix[code];\n      }\n\n      first = suffix[code] & 0xff;\n      pixelStack[top++] = first; // add a new string to the table, but only if space is available\n      // if not, just continue with current table until a clear code is found\n      // (deferred clear code implementation as per GIF spec)\n\n      if (available < MAX_STACK_SIZE) {\n        prefix[available] = old_code;\n        suffix[available] = first;\n        available++;\n\n        if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {\n          code_size++;\n          code_mask += available;\n        }\n      }\n\n      old_code = in_code;\n    } // Pop a pixel off the pixel stack.\n\n\n    top--;\n    dstPixels[pi++] = pixelStack[top];\n    i++;\n  }\n\n  for (i = pi; i < npix; i++) {\n    dstPixels[i] = 0; // clear missing pixels\n  }\n\n  return dstPixels;\n};\n\nexports.lzw = lzw;\n\n//# sourceURL=webpack:///./node_modules/gifuct-js/lib/lzw.js?");

/***/ }),

/***/ "./node_modules/js-binary-schema-parser/lib/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/js-binary-schema-parser/lib/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.loop = exports.conditional = exports.parse = void 0;\n\nvar parse = function parse(stream, schema) {\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : result;\n\n  if (Array.isArray(schema)) {\n    schema.forEach(function (partSchema) {\n      return parse(stream, partSchema, result, parent);\n    });\n  } else if (typeof schema === 'function') {\n    schema(stream, result, parent, parse);\n  } else {\n    var key = Object.keys(schema)[0];\n\n    if (Array.isArray(schema[key])) {\n      parent[key] = {};\n      parse(stream, schema[key], result, parent[key]);\n    } else {\n      parent[key] = schema[key](stream, result, parent, parse);\n    }\n  }\n\n  return result;\n};\n\nexports.parse = parse;\n\nvar conditional = function conditional(schema, conditionFunc) {\n  return function (stream, result, parent, parse) {\n    if (conditionFunc(stream, result, parent)) {\n      parse(stream, schema, result, parent);\n    }\n  };\n};\n\nexports.conditional = conditional;\n\nvar loop = function loop(schema, continueFunc) {\n  return function (stream, result, parent, parse) {\n    var arr = [];\n    var lastStreamPos = stream.pos;\n\n    while (continueFunc(stream, result, parent)) {\n      var newParent = {};\n      parse(stream, schema, result, newParent); // cases when whole file is parsed but no termination is there and stream position is not getting updated as well\n      // it falls into infinite recursion, null check to avoid the same\n\n      if (stream.pos === lastStreamPos) {\n        break;\n      }\n\n      lastStreamPos = stream.pos;\n      arr.push(newParent);\n    }\n\n    return arr;\n  };\n};\n\nexports.loop = loop;\n\n//# sourceURL=webpack:///./node_modules/js-binary-schema-parser/lib/index.js?");

/***/ }),

/***/ "./node_modules/js-binary-schema-parser/lib/parsers/uint8.js":
/*!*******************************************************************!*\
  !*** ./node_modules/js-binary-schema-parser/lib/parsers/uint8.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.readBits = exports.readArray = exports.readUnsigned = exports.readString = exports.peekBytes = exports.readBytes = exports.peekByte = exports.readByte = exports.buildStream = void 0;\n\n// Default stream and parsers for Uint8TypedArray data type\nvar buildStream = function buildStream(uint8Data) {\n  return {\n    data: uint8Data,\n    pos: 0\n  };\n};\n\nexports.buildStream = buildStream;\n\nvar readByte = function readByte() {\n  return function (stream) {\n    return stream.data[stream.pos++];\n  };\n};\n\nexports.readByte = readByte;\n\nvar peekByte = function peekByte() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (stream) {\n    return stream.data[stream.pos + offset];\n  };\n};\n\nexports.peekByte = peekByte;\n\nvar readBytes = function readBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos += length);\n  };\n};\n\nexports.readBytes = readBytes;\n\nvar peekBytes = function peekBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos + length);\n  };\n};\n\nexports.peekBytes = peekBytes;\n\nvar readString = function readString(length) {\n  return function (stream) {\n    return Array.from(readBytes(length)(stream)).map(function (value) {\n      return String.fromCharCode(value);\n    }).join('');\n  };\n};\n\nexports.readString = readString;\n\nvar readUnsigned = function readUnsigned(littleEndian) {\n  return function (stream) {\n    var bytes = readBytes(2)(stream);\n    return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];\n  };\n};\n\nexports.readUnsigned = readUnsigned;\n\nvar readArray = function readArray(byteSize, totalOrFunc) {\n  return function (stream, result, parent) {\n    var total = typeof totalOrFunc === 'function' ? totalOrFunc(stream, result, parent) : totalOrFunc;\n    var parser = readBytes(byteSize);\n    var arr = new Array(total);\n\n    for (var i = 0; i < total; i++) {\n      arr[i] = parser(stream);\n    }\n\n    return arr;\n  };\n};\n\nexports.readArray = readArray;\n\nvar subBitsTotal = function subBitsTotal(bits, startIndex, length) {\n  var result = 0;\n\n  for (var i = 0; i < length; i++) {\n    result += bits[startIndex + i] && Math.pow(2, length - i - 1);\n  }\n\n  return result;\n};\n\nvar readBits = function readBits(schema) {\n  return function (stream) {\n    var _byte = readByte()(stream); // convert the byte to bit array\n\n\n    var bits = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      bits[7 - i] = !!(_byte & 1 << i);\n    } // convert the bit array to values based on the schema\n\n\n    return Object.keys(schema).reduce(function (res, key) {\n      var def = schema[key];\n\n      if (def.length) {\n        res[key] = subBitsTotal(bits, def.index, def.length);\n      } else {\n        res[key] = bits[def.index];\n      }\n\n      return res;\n    }, {});\n  };\n};\n\nexports.readBits = readBits;\n\n//# sourceURL=webpack:///./node_modules/js-binary-schema-parser/lib/parsers/uint8.js?");

/***/ }),

/***/ "./node_modules/js-binary-schema-parser/lib/schemas/gif.js":
/*!*****************************************************************!*\
  !*** ./node_modules/js-binary-schema-parser/lib/schemas/gif.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _ = __webpack_require__(/*! ../ */ \"./node_modules/js-binary-schema-parser/lib/index.js\");\n\nvar _uint = __webpack_require__(/*! ../parsers/uint8 */ \"./node_modules/js-binary-schema-parser/lib/parsers/uint8.js\");\n\n// a set of 0x00 terminated subblocks\nvar subBlocksSchema = {\n  blocks: function blocks(stream) {\n    var terminator = 0x00;\n    var chunks = [];\n    var streamSize = stream.data.length;\n    var total = 0;\n\n    for (var size = (0, _uint.readByte)()(stream); size !== terminator; size = (0, _uint.readByte)()(stream)) {\n      // size becomes undefined for some case when file is corrupted and  terminator is not proper \n      // null check to avoid recursion\n      if (!size) break; // catch corrupted files with no terminator\n\n      if (stream.pos + size >= streamSize) {\n        var availableSize = streamSize - stream.pos;\n        chunks.push((0, _uint.readBytes)(availableSize)(stream));\n        total += availableSize;\n        break;\n      }\n\n      chunks.push((0, _uint.readBytes)(size)(stream));\n      total += size;\n    }\n\n    var result = new Uint8Array(total);\n    var offset = 0;\n\n    for (var i = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset);\n      offset += chunks[i].length;\n    }\n\n    return result;\n  }\n}; // global control extension\n\nvar gceSchema = (0, _.conditional)({\n  gce: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    byteSize: (0, _uint.readByte)()\n  }, {\n    extras: (0, _uint.readBits)({\n      future: {\n        index: 0,\n        length: 3\n      },\n      disposal: {\n        index: 3,\n        length: 3\n      },\n      userInput: {\n        index: 6\n      },\n      transparentColorGiven: {\n        index: 7\n      }\n    })\n  }, {\n    delay: (0, _uint.readUnsigned)(true)\n  }, {\n    transparentColorIndex: (0, _uint.readByte)()\n  }, {\n    terminator: (0, _uint.readByte)()\n  }]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xf9;\n}); // image pipeline block\n\nvar imageSchema = (0, _.conditional)({\n  image: [{\n    code: (0, _uint.readByte)()\n  }, {\n    descriptor: [{\n      left: (0, _uint.readUnsigned)(true)\n    }, {\n      top: (0, _uint.readUnsigned)(true)\n    }, {\n      width: (0, _uint.readUnsigned)(true)\n    }, {\n      height: (0, _uint.readUnsigned)(true)\n    }, {\n      lct: (0, _uint.readBits)({\n        exists: {\n          index: 0\n        },\n        interlaced: {\n          index: 1\n        },\n        sort: {\n          index: 2\n        },\n        future: {\n          index: 3,\n          length: 2\n        },\n        size: {\n          index: 5,\n          length: 3\n        }\n      })\n    }]\n  }, (0, _.conditional)({\n    lct: (0, _uint.readArray)(3, function (stream, result, parent) {\n      return Math.pow(2, parent.descriptor.lct.size + 1);\n    })\n  }, function (stream, result, parent) {\n    return parent.descriptor.lct.exists;\n  }), {\n    data: [{\n      minCodeSize: (0, _uint.readByte)()\n    }, subBlocksSchema]\n  }]\n}, function (stream) {\n  return (0, _uint.peekByte)()(stream) === 0x2c;\n}); // plain text block\n\nvar textSchema = (0, _.conditional)({\n  text: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    preData: function preData(stream, result, parent) {\n      return (0, _uint.readBytes)(parent.text.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0x01;\n}); // application block\n\nvar applicationSchema = (0, _.conditional)({\n  application: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    id: function id(stream, result, parent) {\n      return (0, _uint.readString)(parent.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xff;\n}); // comment block\n\nvar commentSchema = (0, _.conditional)({\n  comment: [{\n    codes: (0, _uint.readBytes)(2)\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xfe;\n});\nvar schema = [{\n  header: [{\n    signature: (0, _uint.readString)(3)\n  }, {\n    version: (0, _uint.readString)(3)\n  }]\n}, {\n  lsd: [{\n    width: (0, _uint.readUnsigned)(true)\n  }, {\n    height: (0, _uint.readUnsigned)(true)\n  }, {\n    gct: (0, _uint.readBits)({\n      exists: {\n        index: 0\n      },\n      resolution: {\n        index: 1,\n        length: 3\n      },\n      sort: {\n        index: 4\n      },\n      size: {\n        index: 5,\n        length: 3\n      }\n    })\n  }, {\n    backgroundColorIndex: (0, _uint.readByte)()\n  }, {\n    pixelAspectRatio: (0, _uint.readByte)()\n  }]\n}, (0, _.conditional)({\n  gct: (0, _uint.readArray)(3, function (stream, result) {\n    return Math.pow(2, result.lsd.gct.size + 1);\n  })\n}, function (stream, result) {\n  return result.lsd.gct.exists;\n}), // content frames\n{\n  frames: (0, _.loop)([gceSchema, applicationSchema, commentSchema, imageSchema, textSchema], function (stream) {\n    var nextCode = (0, _uint.peekByte)()(stream); // rather than check for a terminator, we should check for the existence\n    // of an ext or image block to avoid infinite loops\n    //var terminator = 0x3B;\n    //return nextCode !== terminator;\n\n    return nextCode === 0x21 || nextCode === 0x2c;\n  })\n}];\nvar _default = schema;\nexports[\"default\"] = _default;\n\n//# sourceURL=webpack:///./node_modules/js-binary-schema-parser/lib/schemas/gif.js?");

/***/ }),

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gifuct_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gifuct-js */ \"./node_modules/gifuct-js/lib/index.js\");\n\n\n\n// - - - - - - - - - - - - Constants - - - - - - - - - - - - //\n\nconst maxUploadSize = 1024 * 1024 * 8;\nconst imageSize = 22;\n\n\nconst canvas = document.createElement('canvas');\ncanvas.width = imageSize;\ncanvas.height = imageSize;\n\n// - - - - - - - - - - - - Sliders - - - - - - - - - - - - //\n \ndocument.querySelectorAll('.slider-group').forEach(group => {\n  const slider = group.querySelector('.slider');\n  const manualInput = group.querySelector('.manualSlider');\n\n  slider.addEventListener('input', function() {\n    manualInput.value = this.value;\n  });\n\n  manualInput.addEventListener('input', function() {\n    // Ensure input value is within slider's range\n    const min = slider.min || 0;\n    const max = slider.max || 100;\n    this.value = Math.max(min, Math.min(max, this.value));\n    slider.value = this.value;\n  });\n});\n\n// - - - - - - - - - - - - Upload Box - - - - - - - - - - - - //\n\nconst dropZone = document.getElementById('dropZone');\nconst progressBar = document.getElementById('progressBar');\nconst previewImage = document.getElementById('previewImage');\nconst imagePreviewContainer = document.getElementById('imagePreviewContainer');\nconst imagePreviewSeparator = document.getElementById('imagePreviewSeparator');\nconst fileInput = document.getElementById('fileInput');\n\n\nfileInput.addEventListener('change', (event) => {\n  handleFiles(event.target.files);\n});\n\ndropZone.addEventListener('dragover', (event) => {\n  event.preventDefault();\n  event.stopPropagation();\n  dropZone.style.borderColor = '#ff4060';\n});\n\ndropZone.addEventListener('dragleave', (event) => {\n  event.preventDefault();\n  event.stopPropagation();\n  dropZone.style.borderColor = '#555555';\n});\n\ndropZone.addEventListener('drop', (event) => {\n  event.preventDefault();\n  event.stopPropagation();\n  dropZone.style.borderColor = '#555557';\n  const files = event.dataTransfer.files;\n\n  if (files.length === 0) {\n    alert('Please select a file to upload.');\n    return;\n  }\n\n  const file = files[0];\n\n  // Detect file type\n  if (file.type === 'image/gif') {\n    console.log('GIF detected.');\n    handleGIFFile(file);\n  } else if (file.type.startsWith('image/')) {\n    console.log('Image detected.');\n    handleImageFile(file);\n  } else {\n    alert('Unsupported file type. Please upload a valid image or GIF.');\n  }\n});\n\n// - - - - - - - - - - - - Image Upload - - - - - - - - - - - - //\n\n/*\nThis is the Json format that will be used.\nUsing this will open up the possibility of using videos or GIF's further in the future.\n\n{\n\"frames\":            // collection of frames\n[\n  {\n    \"delay\":\"\",      // delay in miliseconds between this frame and the one before it.\n    \"data\": [\n      123, 255, 244, // first pixel\n      0, 255, 255,   // second pixel\n      ...,\n    ]\n  }\n]\n}\n*/\nasync function handleImageFile(file) {\n  const canvas = document.createElement('canvas');\n  const img = new Image();\n  \n  img.src = URL.createObjectURL(file);\n  await img.decode();\n\n  // Set canvas size (e.g., 128x128)\n  canvas.width = imageSize;\n  canvas.height = imageSize;\n\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(img, 0, 0, imageSize, imageSize);\n\n  // Extract pixel data\n  const imageData = ctx.getImageData(0, 0, imageSize, imageSize);\n  const { data } = imageData;\n  const jsonStructure = { frames: [{ delay: 0, data: [] }] };\n\n  for (let i = 0; i < data.length; i += 4) {\n    const r = data[i];\n    const g = data[i + 1];\n    const b = data[i + 2];\n    jsonStructure.frames[0].data.push(r, g, b);\n  }\n\n  // Convert JSON object to Blob\n  const jsonBlob = new Blob([JSON.stringify(jsonStructure)], { type: 'application/json' });\n\n  console.log(jsonStructure);\n  console.log(JSON.stringify(jsonStructure))\n  \n  // Send JSON to ESP32\n  await uploadJSON(jsonBlob, 'image.json');\n}\n\n\n// - - - - - - - - - - - - GIF Upload - - - - - - - - - - - - //\n\nasync function handleGIFFile(file) {\n  const frames = await getFramesFromGIF(file)\n\n  const jsonStructure = { \n    frames: [] \n  };\n\n  for (const frame of frames) {\n    const processedFrame = await processGIFFrame(frame)\n\n    jsonStructure.frames.push(processedFrame);\n  }\n\n  // Convert JSON object to Blob\n  const jsonBlob = new Blob([JSON.stringify(jsonStructure)], { type: 'application/json' });\n\n  console.log(jsonStructure);\n  console.log(JSON.stringify(jsonStructure))\n  \n  // Send JSON to ESP32\n  await uploadJSON(jsonBlob, 'image.json');\n}\n\nasync function processGIFFrame(frame) {\n  // Resize the canvas to the desired dimensions\n  canvas.width = frame.dims.width;\n  canvas.height = frame.dims.height;\n\n  const ctx = canvas.getContext('2d');\n\n  // Create an ImageData object to represent the frame\n  const imageData = ctx.createImageData(frame.dims.width, frame.dims.height);\n\n  // Populate the ImageData with pixel data\n  const colorTable = frame.colorTable;\n  for (let i = 0; i < frame.pixels.length; i++) {\n    const pixelIndex = frame.pixels[i];\n    const baseIndex = i * 4;\n    if (pixelIndex === frame.transparentIndex) {\n      // Transparent pixel\n      imageData.data[baseIndex + 3] = 0;\n    } else {\n      // Map pixel to colorTable\n      const [r, g, b] = colorTable[pixelIndex];\n      imageData.data[baseIndex] = r;\n      imageData.data[baseIndex + 1] = g;\n      imageData.data[baseIndex + 2] = b;\n      imageData.data[baseIndex + 3] = 255; // Fully opaque\n    }\n  }\n\n  // Draw the image data onto the off-screen canvas\n  ctx.putImageData(imageData, 0, 0);\n\n  // Scale the content from the off-screen canvas onto the main canvas\n  ctx.drawImage(canvas, 0, 0, imageSize, imageSize);\n\n  // Extract the resized image data\n  const resizedImageData = ctx.getImageData(0, 0, imageSize, imageSize);\n\n  // Extract RGBA data for JSON\n  const { data } = resizedImageData;\n  const frameData = [];\n  for (let i = 0; i < data.length; i += 4) {\n    const r = data[i];\n    const g = data[i + 1];\n    const b = data[i + 2];\n    frameData.push(r, g, b);\n  }\n\n  return {\n    delay: frame.delay,\n    data: frameData,\n  };\n}\n\nasync function getFramesFromGIF(file) {\n  let buffer = await file.arrayBuffer()\n  let gif = (0,gifuct_js__WEBPACK_IMPORTED_MODULE_0__.parseGIF)(buffer)\n  let frames = (0,gifuct_js__WEBPACK_IMPORTED_MODULE_0__.decompressFrames)(gif, true)\n\n  return frames\n}\n\n// async function handleGIFFile(file) {\n//     const gif = new SuperGif({ gif: document.createElement('img') });\n//\n//     gif.load(URL.createObjectURL(file));\n//\n//     await new Promise((resolve) => gif.load(resolve));\n//\n//     const frameCount = gif.get_length();\n//     const size = 22; // Resize target\n//\n//     const jsonStructure = { frames: [] };\n//\n//     for (let i = 0; i < frameCount; i++) {\n//       gif.move_to(i);\n//       const canvas = gif.get_canvas();\n//       const ctx = canvas.getContext('2d');\n//       const resizedCanvas = document.createElement('canvas');\n//       resizedCanvas.width = size;\n//       resizedCanvas.height = size;\n//       const resizedCtx = resizedCanvas.getContext('2d');\n//       resizedCtx.drawImage(canvas, 0, 0, size, size);\n//\n//       const { data } = resizedCtx.getImageData(0, 0, size, size);\n//       const frameData = { delay: gif.get_delay(i), data: [] };\n//\n//       for (let j = 0; j < data.length; j += 4) {\n//         const r = data[j];\n//         const g = data[j + 1];\n//         const b = data[j + 2];\n//         frameData.data.push(r, g, b);\n//       }\n//\n//       jsonStructure.frames.push(frameData);\n//     }\n//\n//     // Convert JSON object to Blob\n//     const jsonBlob = new Blob([JSON.stringify(jsonStructure)], { type: 'application/json' });\n//\n//     console.log(jsonStructure);\n//     console.log(JSON.stringify(jsonStructure));\n//\n//     // Send JSON to ESP32\n//     await uploadJSON(jsonBlob, 'animation.json');\n//   }\n//\n\nasync function uploadJSON(jsonBlob, fileName) {\n  const formData = new FormData();\n  formData.append('file', jsonBlob, fileName);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/upload', true);\n\n  xhr.upload.onprogress = (event) => {\n    if (event.lengthComputable) {\n      const percentComplete = (event.loaded / event.total) * 100;\n      progressBar.value = percentComplete;\n    }\n  };\n\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      alert('Finished uploading the image! :)');\n    } else {\n      alert('Error uploading file.');\n    }\n  };\n\n  xhr.send(formData);\n}\n\n// - - - - - - - - - - - - CurrentRPM - - - - - - - - - - - - //\n\nfunction updateCurrentRPM() {\n  fetch('/CurrentRPM')\n    .then(response => response.text())\n    .then(data => {\n      // Update the width of the progress bar based on the value received\n      // const rpm = parseInt(data);\n      // document.getElementById('currentRPMLabel').innerText = rpm + \" RPM\";\n      document.getElementById('currentRPMLabel').innerText = data + \" RPM\";\n    })\n    .catch(error => console.error('Error:', error));\n}\n\n// setInterval(updateCurrentRPM, 500);\n\n// - - - - - - - - - - - - Data Sending - - - - - - - - - - - - //\n\nlet timeout;\n\n// Function to send data to the server\nfunction sendData(input) {\n  clearTimeout(timeout); // Clear the previous timeout\n\n  timeout = setTimeout(() => {\n    var formData = new FormData();\n    formData.append(input.name, input.type === 'checkbox' ? input.checked : input.value);\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/post\", true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        console.log(\"Data sent and response loaded\");\n      }\n    };\n    xhr.send(new URLSearchParams(formData).toString());\n  }, 80); // Delay sending the request.\n}\n\n// Add event listeners to all form elements\ndocument.querySelectorAll('#dataForm input, #dataForm select').forEach(function(element) {\n  element.addEventListener('input', function(event) {\n    sendData(event.target);\n  });\n});\n\n\n// - - - - - - - - - - - - Item-Toggle - - - - - - - - - - - - //\n\nfunction toggleSection(header) {\n  const gridItem = header.parentElement;\n  const content = header.nextElementSibling;\n  const button = header.querySelector('.toggle-btn');\n\n  content.classList.toggle('collapsed');\n  gridItem.classList.toggle('collapsed');\n  button.textContent = content.classList.contains('collapsed') ? '+' : '−';\n}\n\n// - - - - - - - - - - - - Parallax effect - - - - - - - - - - - - //\n\ndocument.querySelectorAll('#imagePreviewContainer').forEach(container => {\n    const box = container.querySelector('.previewImage');\n\n    box.style.transition = 'transform 0.4s ease-out';\n\n    container.addEventListener('mousemove', function (event) {\n        const boxRect = box.getBoundingClientRect();\n        const centerX = boxRect.left + boxRect.width / 2;\n        const centerY = boxRect.top + boxRect.height / 2;\n        const offsetX = (event.clientX - centerX) / boxRect.width * 2;\n        const offsetY = (event.clientY - centerY) / boxRect.height * 2;\n\n        const rotateX = offsetY * 15;\n        const rotateY = offsetX * -15;\n        const translateZ = 30; // Adjust the 30 value for more or less pop out\n\n        box.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(${translateZ}px)`;\n    });\n\n    container.addEventListener('mouseleave', function () {\n        setTimeout(() => {\n            box.style.transform = `rotateX(0deg) rotateY(0deg) translateZ(0)`;\n        }, 1000);\n    });\n});\n\n\n//# sourceURL=webpack:///./src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/script.js");
/******/ 	
/******/ })()
;